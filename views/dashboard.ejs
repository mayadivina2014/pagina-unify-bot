<%/*
  dashboard.ejs
  Versión final — incluye búsqueda cliente y botón "Actualizar" funcional.
  Intenta primero obtener /api/guilds (JSON). Si no existe, llama a /dashboard/refresh y recarga.
*/%>
<style>
:root {
  --primary: #5865F2;
  --primary-dark: #4752c4;
  --bg: #f6f7fb;
  --card: #fff;
  --card-hover: #f8f9fa;
  --muted: #7a8089;
  --border-color: #e9edf3;
  --text-primary: #2f3136;
  --text-secondary: #4f5660;
  --gradient-primary: linear-gradient(135deg, #5865F2 0%, #4752c4 100%);
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --border-radius: 8px;
  --border-radius-lg: 12px;
  --transition: all 0.2s ease-in-out;
}

[data-theme="dark"] {
  --primary: #5865F2;
  --primary-dark: #4752c4;
  --bg: #1a1b1e;
  --card: #2d2f33;
  --card-hover: #36393f;
  --muted: #a0a0a0;
  --border-color: #40444b;
  --text-primary: #f2f3f5;
  --text-secondary: #b9bbbe;
  --gradient-primary: linear-gradient(135deg, #5865F2 0%, #3a45a5 100%);
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.3);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.25);
}
/* Base Styles */
body {
  font-family: 'Poppins', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  background-color: var(--bg);
  color: var(--text-primary);
  line-height: 1.5;
}

.dashboard-wrap {
  padding: 2rem 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}
.dashboard-top{display:flex;justify-content:space-between;align-items:center;gap:12px;margin-bottom:16px}
.title-group h1{font-size:20px;margin:0}
.title-group p{margin:0;font-size:13px;color:var(--muted)}
.controls{display:flex;gap:10px;align-items:center}
.search{display:flex;align-items:center;background:var(--card);border-radius:999px;padding:6px 10px;border:1px solid #e9edf3}
[data-theme="dark"] .search{border:1px solid #404040}
.search input{border:0;outline:0;background:transparent;padding:6px;width:200px}
.badge{background:linear-gradient(90deg,var(--primary),var(--primary-dark));color:white;padding:6px 10px;border-radius:999px;font-weight:600}
/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1.25rem;
  border-radius: var(--border-radius);
  font-weight: 600;
  font-size: 0.9375rem;
  line-height: 1.5;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  border: 1px solid transparent;
  transition: var(--transition);
}

.btn-primary {
  background: var(--gradient-primary);
  color: white;
  border: none;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(88, 101, 242, 0.3);
}

.btn-outline-primary {
  background: transparent;
  color: var(--primary);
  border: 1px solid var(--primary);
}

.btn-outline-primary:hover {
  background: rgba(88, 101, 242, 0.1);
  transform: translateY(-1px);
}

.btn-lg {
  padding: 0.625rem 1.5rem;
  font-size: 1rem;
  border-radius: var(--border-radius);
}

.btn i {
  margin-right: 0.5rem;
}
/* Servers Grid */
.servers-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1.5rem;
  margin-top: 1.5rem;
}

@media (max-width: 768px) {
  .servers-grid {
    grid-template-columns: 1fr;
  }
}
/* Cards */
.card {
  background: var(--card);
  border-radius: var(--border-radius-lg);
  border: 1px solid var(--border-color);
  box-shadow: var(--shadow-sm);
  transition: var(--transition);
  overflow: hidden;
}

.card.hover-lift:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
  border-color: var(--primary);
}

.card-header {
  background-color: var(--card-hover);
  border-bottom: 1px solid var(--border-color);
  padding: 1rem 1.5rem;
}

.card-title {
  color: var(--text-primary);
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.card-sub {
  color: var(--text-secondary);
  font-size: 0.875rem;
  margin-bottom: 1rem;
}
.card-body{padding:14px;display:flex;flex-direction:column;align-items:center;text-align:center}
/* Server Avatars */
.server-avatar {
  width: 82px;
  height: 82px;
  border-radius: var(--border-radius);
  object-fit: cover;
  margin-bottom: 1rem;
  border: 3px solid var(--card);
  box-shadow: var(--shadow-sm);
}

.server-initial {
  width: 82px;
  height: 82px;
  border-radius: var(--border-radius);
  display: grid;
  place-items: center;
  font-size: 2rem;
  font-weight: 700;
  color: white;
  background: var(--gradient-primary);
  margin-bottom: 1rem;
  text-transform: uppercase;
  box-shadow: var(--shadow-sm);
}
.card-title{font-weight:700;margin:0 0 6px}
.card-sub{color:var(--muted);font-size:13px;margin:0 0 12px}
.card-actions{width:100%;display:flex;gap:8px}
.manage{background:linear-gradient(90deg,var(--primary),var(--primary-dark));color:white;padding:10px;border-radius:8px;text-decoration:none}
.invite{background:transparent;border:1px solid #f0f2f8;color:var(--muted);padding:10px;border-radius:8px;text-decoration:none}
[data-theme="dark"] .invite{border:1px solid #505050}
.status{display:inline-flex;gap:8px;align-items:center;font-weight:600;padding:6px 10px;border-radius:999px;font-size:13px}
.status .dot{width:9px;height:9px;border-radius:50%}
.status.online .dot{background:#2fc35a}
.status.offline .dot{background:#ed4245}
/* Empty State */
.empty-state {
  background: var(--card);
  border: 2px dashed var(--border-color);
  border-radius: var(--border-radius-lg);
  padding: 3rem 2rem;
  text-align: center;
  max-width: 600px;
  margin: 0 auto;
}

.empty-state i {
  color: var(--primary);
  margin-bottom: 1.5rem;
}

.empty-state h4 {
  color: var(--text-primary);
  margin-bottom: 0.75rem;
}

.empty-state p {
  color: var(--text-secondary);
  margin-bottom: 1.5rem;
  max-width: 80%;
  margin-left: auto;
  margin-right: auto;
}
.spinner{width:16px;height:16px;border:2px solid rgba(255,255,255,0.2);border-top-color:rgba(255,255,255,0.9);border-radius:50%;animation:spin .8s linear infinite;display:inline-block}
@keyframes spin{to{transform:rotate(360deg)}}
/* Toast Notifications */
.toast {
  position: fixed;
  top: 1.5rem;
  right: 1.5rem;
  z-index: 1100;
  min-width: 300px;
  overflow: hidden;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-lg);
  opacity: 0;
  transform: translateY(-20px);
  transition: var(--transition);
}

.toast.show {
  opacity: 1;
  transform: translateY(0);
}

.toast-body {
  padding: 1rem 1.25rem;
  color: white;
  font-weight: 500;
}

.btn-close {
  opacity: 0.8;
  transition: var(--transition);
}

.btn-close:hover {
  opacity: 1;
}
.theme-toggle{background:var(--card);border:1px solid #e9edf3;padding:8px;border-radius:8px;cursor:pointer;display:flex;align-items:center;gap:8px;font-size:14px}
[data-theme="dark"] .theme-toggle{background:var(--card);border:1px solid #404040}
/* Responsive Adjustments */
@media (max-width: 768px) {
  .dashboard-top {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }
  
  .controls {
    width: 100%;
    justify-content: space-between;
  }
  
  .search {
    flex: 1;
    max-width: none;
  }
  
  .servers-grid {
    grid-template-columns: 1fr;
  }
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.server-item {
  animation: fadeIn 0.3s ease-out forwards;
  opacity: 0;
}

/* Add delay for each server item */
.server-item:nth-child(1) { animation-delay: 0.05s; }
.server-item:nth-child(2) { animation-delay: 0.1s; }
.server-item:nth-child(3) { animation-delay: 0.15s; }
.server-item:nth-child(n+4) { animation-delay: 0.2s; }
</style>

<div class="dashboard-wrap">
  <div class="dashboard-top d-flex justify-content-between align-items-center flex-wrap gap-3 mb-4">
    <div class="title-group">
      <h1 class="mb-1 fw-bold">Tus Servidores</h1>
      <p class="text-muted mb-0">Selecciona un servidor para empezar a configurar Unify.</p>
    </div>
    <div class="controls d-flex gap-3 align-items-center">
      <div class="input-group search rounded-pill shadow-sm" style="max-width: 300px;">
        <span class="input-group-text bg-transparent border-0 text-muted">
          <i class="fas fa-search"></i>
        </span>
        <input type="text" id="search" class="form-control border-0" 
          placeholder="Buscar servidor..." aria-label="Buscar servidor">
      </div>
      <button id="refreshButton" class="btn btn-outline" style="border-radius: 999px;">
        <i id="refreshIcon" class="fas fa-sync-alt"></i>
      </button>
    </div>

      <span id="totalBadge" class="badge"><%= Array.isArray(guilds) ? guilds.length : '-' %></span>

      <button id="themeToggle" class="theme-toggle" title="Cambiar tema" aria-live="polite">
        <i class="fas fa-moon" id="themeIcon"></i>
        <span id="themeText">Oscuro</span>
      </button>

      <button id="refreshButton" class="btn" title="Actualizar servidores" aria-live="polite">
        <i class="fas fa-sync-alt" id="refreshIcon" style="margin-right:8px"></i>Actualizar
      </button>
    </div>
  </div>

  <div id="serversGrid" class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4 servers-grid" aria-live="polite">
    <% if (Array.isArray(guilds) && guilds.length > 0) { %>
      <% guilds.forEach(guild => { %>
        <div class="col server-item">
          <div class="card h-100 shadow-md border-0 bg-card hover-lift">
            <div class="card-body d-flex flex-column align-items-center text-center p-4">
              <% if (guild.icon) { %>
                <img src="<%= `https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.png?size=128` %>" 
                     alt="<%= guild.name %>" class="server-avatar rounded-3 mb-3">
              <% } else { %>
                <div class="server-initial d-grid place-items-center rounded-3 mb-3 text-white fw-bold" 
                     style="width: 82px; height: 82px; background: var(--gradient-primary);">
                  <%= guild.name.charAt(0) %>
                </div>
              <% } %>
              <h5 class="card-title fw-bold text-primary mb-1"><%= guild.name %></h5>
              <p class="card-sub text-muted mb-3">
                <i class="fas fa-users me-1"></i> <%= guild.memberCount || 'N/A' %> Miembros
              </p>
              <div class="card-actions d-flex w-100 gap-2">
                <% if (guild.botInGuild && guild.hasAdmin) { %>
                  <a href="/dashboard/<%= guild.id %>" class="btn btn-primary w-100">
                    <i class="fas fa-cogs me-1"></i> Gestionar
                  </a>
                <% } else { %>
                  <a href="<%= botInvite %>" target="_blank" class="btn btn-outline-primary w-100">
                    <i class="fas fa-robot me-1"></i> Invitar
                  </a>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="col-12">
        <div class="empty-state text-center bg-card p-5 rounded-4 shadow-sm">
          <i class="fas fa-server fa-3x text-primary mb-3"></i>
          <h4 class="fw-bold">No se encontraron servidores</h4>
          <p class="text-muted">
            Asegúrate de que el bot tenga permisos de "Administrador" o "Gestionar Servidor" en el servidor que quieres configurar.
          </p>
          <a href="<%= botInvite %>" class="btn btn-primary btn-lg mt-3" target="_blank">
            <i class="fas fa-plus me-2"></i> Invitar Bot
          </a>
        </div>
      </div>
    <% } %>
  </div>
</div>

<div id="toast" class="toast" role="status" aria-atomic="true"></div>

<script>
(function(){
  'use strict';

  // Elementos DOM
  const serversGrid = document.getElementById('serversGrid');
  const refreshButton = document.getElementById('refreshButton');
  const refreshIcon = document.getElementById('refreshIcon');
  const toast = document.getElementById('toast');
  const searchInput = document.getElementById('search');
  const themeToggle = document.getElementById('themeToggle');
  const themeIcon = document.getElementById('themeIcon');
  const themeText = document.getElementById('themeText');
  
  // Variables globales
  let guildsData = [];

  // Funcionalidad del tema
  function initTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeIcon(savedTheme);
  }

  function updateThemeIcon(theme) {
    if (theme === 'dark') {
      themeIcon.className = 'fas fa-sun';
      themeText.textContent = 'Claro';
    } else {
      themeIcon.className = 'fas fa-moon';
      themeText.textContent = 'Oscuro';
    }
  }

  function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    updateThemeIcon(newTheme);

    showToast(`Tema cambiado a ${newTheme === 'dark' ? 'oscuro' : 'claro'}`);
  }

  // Funcionalidad de notificaciones
  function showToast(msg, ms = 2500) {
    toast.textContent = msg;
    toast.classList.add('show');
    setTimeout(() => toast.classList.remove('show'), ms);
  }

  // Utilidades
  function getFirstLetter(name) {
    return name ? name.charAt(0).toUpperCase() : '?';
  }

  // Crear tarjeta de servidor
  function buildCard(guild) {
    const card = document.createElement('div');
    card.className = 'card';
    card.setAttribute('data-name', (guild.name || '').toLowerCase());

    const body = document.createElement('div');
    body.className = 'card-body';

    // Avatar o inicial
    if (guild.iconUrl) {
      const img = document.createElement('img');
      img.className = 'server-avatar';
      img.src = guild.iconUrl;
      img.alt = guild.name || 'Servidor';
      img.onerror = function() {
        this.onerror = null;
        this.src = 'https://ui-avatars.com/api/?name=' + encodeURIComponent(guild.name || '') + '&background=random&size=128&rounded=true&bold=true';
      };
      body.appendChild(img);
    } else {
      const div = document.createElement('div');
      div.className = 'server-initial';
      div.textContent = getFirstLetter(guild.name);
      body.appendChild(div);
    }

    // Título e ID
    const title = document.createElement('div');
    title.className = 'card-title';
    title.textContent = guild.name || 'Servidor sin nombre';

    const sub = document.createElement('div');
    sub.className = 'card-sub';
    sub.innerHTML = 'ID: <span style="font-family:monospace;font-size:12px;color:var(--muted)">' + (guild.id || 'N/A') + '</span>';

    // Botones de acción
    const actions = document.createElement('div');
    actions.className = 'card-actions';

    if (guild.botInGuild) {
      const manageLink = document.createElement('a');
      manageLink.className = 'manage';
      manageLink.href = '/dashboard/' + guild.id;
      manageLink.innerHTML = '<i class="fas fa-cog" style="margin-right:8px"></i>Administrar';
      actions.appendChild(manageLink);
    } else {
      const inviteLink = document.createElement('a');
      inviteLink.className = 'invite';
      inviteLink.target = '_blank';
      const clientId = encodeURIComponent(typeof process !== 'undefined' && process.env && process.env.DISCORD_CLIENT_ID ? process.env.DISCORD_CLIENT_ID : '<CLIENT_ID>');
      inviteLink.href = 'https://discord.com/oauth2/authorize?client_id=' + clientId + '&scope=bot&permissions=8&guild_id=' + encodeURIComponent(guild.id || '');
      inviteLink.innerHTML = '<i class="fas fa-robot" style="margin-right:8px"></i>Agregar bot';
      actions.appendChild(inviteLink);
    }

    // Estado del bot
    const statusWrap = document.createElement('div');
    statusWrap.style.marginTop = '10px';
    statusWrap.style.display = 'flex';
    statusWrap.style.justifyContent = 'center';

    const status = document.createElement('div');
    status.className = 'status ' + (guild.botInGuild ? 'online' : 'offline');

    const dot = document.createElement('span');
    dot.className = 'dot';
    status.appendChild(dot);

    const txt = document.createElement('span');
    txt.textContent = guild.botInGuild ? 'Bot en el servidor' : 'Bot no está en el servidor';
    status.appendChild(txt);

    statusWrap.appendChild(status);

    // Ensamblar tarjeta
    body.appendChild(title);
    body.appendChild(sub);
    body.appendChild(actions);
    body.appendChild(statusWrap);
    card.appendChild(body);

    return card;
  }

  // Renderizar lista de servidores
  function renderGuilds(list) {
    serversGrid.innerHTML = '';

    if (!Array.isArray(list) || list.length === 0) {
      serversGrid.innerHTML = '<div class="empty"><i class="fas fa-server" style="font-size:36px;color:#99aab5"></i><h3>No se encontraron servidores</h3><p style="color:var(--muted);max-width:560px">No tienes permisos de administrador en ningún servidor de Discord.</p></div>';
      totalBadge.textContent = Array.isArray(list) ? list.length : '-';
      return;
    }

    list.forEach(guild => serversGrid.appendChild(buildCard(guild)));
    totalBadge.textContent = list.length;
  }

  // Inicializar con datos del servidor
  try {
    const initialScript = document.getElementById('initialGuilds');
    if (initialScript && initialScript.textContent) {
      let parsed;
      try {
        const cleanContent = initialScript.textContent.trim();
        parsed = JSON.parse(cleanContent);
      } catch (parseError) {
        console.error('Error parsing initial guilds JSON:', parseError);
        console.error('Raw content:', initialScript.textContent);
        parsed = [];
      }
      renderGuilds(parsed);
    }
  } catch (e) {
    console.error('Error initializing guilds:', e);
    renderGuilds([]);
  }

  // Buscador
  if (searchInput) {
    searchInput.addEventListener('input', function(e) {
      const query = e.target.value.trim().toLowerCase();
      document.querySelectorAll('#serversGrid .card').forEach(function(card) {
        const name = card.getAttribute('data-name') || '';
        card.style.display = name.indexOf(query) > -1 ? '' : 'none';
      });
    });
  }

  // Toggle de tema
  if (themeToggle) {
    themeToggle.addEventListener('click', toggleTheme);
  }

  // Inicializar tema
  initTheme();
  
  // Manejar búsqueda en tiempo real
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const serverItems = document.querySelectorAll('.server-item');
      
      serverItems.forEach(item => {
        const serverName = item.getAttribute('data-name') || '';
        if (serverName.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });
  }

  // Botón de actualizar
  if (refreshButton) {
    refreshButton.addEventListener('click', function() {
      refreshButton.disabled = true;
      const oldIcon = refreshIcon.innerHTML;
      refreshIcon.innerHTML = '<span class="spinner"></span>';

      // Intentar obtener guilds via API
      fetch('/api/guilds', {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => {
        if (response.ok) return response.json();
        throw new Error('no-json');
      })
      .then(data => {
        renderGuilds(data);
        showToast('Lista de servidores actualizada');
      })
      .catch(() => {
        // Fallback: usar endpoint de refresh
        return fetch('/dashboard/refresh', {
          method: 'POST',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(res => {
          if (res.ok) {
            return fetch('/api/guilds', {
              method: 'GET',
              headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              }
            })
            .then(r2 => r2.ok ? r2.json() : Promise.reject())
            .then(d2 => {
              renderGuilds(d2);
              showToast('Lista de servidores actualizada');
            })
            .catch(() => location.reload());
          } else {
            location.reload();
          }
        })
        .catch(() => location.reload());
      })
      .finally(() => {
        refreshButton.disabled = false;
        refreshIcon.innerHTML = oldIcon;
      });
    });
  }

})();
</script>
